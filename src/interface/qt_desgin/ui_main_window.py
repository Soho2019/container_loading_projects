# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_PackingSoftware(object):
    def setupUi(self, PackingSoftware):
        PackingSoftware.setObjectName("PackingSoftware")
        PackingSoftware.resize(800, 600)
        PackingSoftware.setMinimumSize(QtCore.QSize(800, 600))
        self.centralwidget = QtWidgets.QWidget(PackingSoftware)
        self.centralwidget.setObjectName("centralwidget")
        self.main_layout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.main_layout.setObjectName("main_layout")
        self.stacked_widget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stacked_widget.setObjectName("stacked_widget")
        self.page_condition = QtWidgets.QWidget()
        self.page_condition.setObjectName("page_condition")
        self.condition_layout = QtWidgets.QVBoxLayout(self.page_condition)
        self.condition_layout.setObjectName("condition_layout")
        self.label_condition = QtWidgets.QLabel(self.page_condition)
        self.label_condition.setObjectName("label_condition")
        self.condition_layout.addWidget(self.label_condition)
        self.stacked_widget.addWidget(self.page_condition)
        self.page_3dview = QtWidgets.QWidget()
        self.page_3dview.setObjectName("page_3dview")
        self.view3d_layout = QtWidgets.QVBoxLayout(self.page_3dview)
        self.view3d_layout.setObjectName("view3d_layout")
        self.label_3dview = QtWidgets.QLabel(self.page_3dview)
        self.label_3dview.setObjectName("label_3dview")
        self.view3d_layout.addWidget(self.label_3dview)
        self.stacked_widget.addWidget(self.page_3dview)
        self.page_simulation = QtWidgets.QWidget()
        self.page_simulation.setObjectName("page_simulation")
        self.simulation_layout = QtWidgets.QVBoxLayout(self.page_simulation)
        self.simulation_layout.setObjectName("simulation_layout")
        self.label_simulation = QtWidgets.QLabel(self.page_simulation)
        self.label_simulation.setObjectName("label_simulation")
        self.simulation_layout.addWidget(self.label_simulation)
        self.stacked_widget.addWidget(self.page_simulation)
        self.page_data = QtWidgets.QWidget()
        self.page_data.setObjectName("page_data")
        self.data_layout = QtWidgets.QVBoxLayout(self.page_data)
        self.data_layout.setObjectName("data_layout")
        self.label_data = QtWidgets.QLabel(self.page_data)
        self.label_data.setObjectName("label_data")
        self.data_layout.addWidget(self.label_data)
        self.stacked_widget.addWidget(self.page_data)
        self.main_layout.addWidget(self.stacked_widget)
        PackingSoftware.setCentralWidget(self.centralwidget)
        self.left_dock = QtWidgets.QDockWidget(PackingSoftware)
        self.left_dock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea|QtCore.Qt.RightDockWidgetArea)
        self.left_dock.setObjectName("left_dock")
        self.function_list = QtWidgets.QListWidget()
        self.function_list.setObjectName("function_list")
        item = QtWidgets.QListWidgetItem()
        self.function_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.function_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.function_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.function_list.addItem(item)
        self.left_dock.setWidget(self.function_list)
        PackingSoftware.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.left_dock)
        self.right_dock = QtWidgets.QDockWidget(PackingSoftware)
        self.right_dock.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea|QtCore.Qt.RightDockWidgetArea)
        self.right_dock.setObjectName("right_dock")
        self.tool_widget = QtWidgets.QWidget()
        self.tool_widget.setObjectName("tool_widget")
        self.tool_layout = QtWidgets.QVBoxLayout(self.tool_widget)
        self.tool_layout.setObjectName("tool_layout")
        self.default_tool_btn = QtWidgets.QPushButton(self.tool_widget)
        self.default_tool_btn.setMinimumSize(QtCore.QSize(0, 30))
        self.default_tool_btn.setObjectName("default_tool_btn")
        self.tool_layout.addWidget(self.default_tool_btn)
        self.import_condition_btn = QtWidgets.QPushButton(self.tool_widget)
        self.import_condition_btn.setMinimumSize(QtCore.QSize(0, 30))
        self.import_condition_btn.setVisible(False)
        self.import_condition_btn.setObjectName("import_condition_btn")
        self.tool_layout.addWidget(self.import_condition_btn)
        self.export_condition_btn = QtWidgets.QPushButton(self.tool_widget)
        self.export_condition_btn.setMinimumSize(QtCore.QSize(0, 30))
        self.export_condition_btn.setVisible(False)
        self.export_condition_btn.setObjectName("export_condition_btn")
        self.tool_layout.addWidget(self.export_condition_btn)
        self.clear_condition_btn = QtWidgets.QPushButton(self.tool_widget)
        self.clear_condition_btn.setMinimumSize(QtCore.QSize(0, 30))
        self.clear_condition_btn.setVisible(False)
        self.clear_condition_btn.setObjectName("clear_condition_btn")
        self.tool_layout.addWidget(self.clear_condition_btn)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.tool_layout.addItem(spacerItem)
        self.right_dock.setWidget(self.tool_widget)
        PackingSoftware.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.right_dock)
        self.bottom_dock = QtWidgets.QDockWidget(PackingSoftware)
        self.bottom_dock.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea|QtCore.Qt.TopDockWidgetArea)
        self.bottom_dock.setObjectName("bottom_dock")
        self.log_text = QtWidgets.QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setObjectName("log_text")
        self.bottom_dock.setWidget(self.log_text)
        PackingSoftware.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.bottom_dock)
        self.menubar = QtWidgets.QMenuBar(PackingSoftware)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menu_file = QtWidgets.QMenu(self.menubar)
        self.menu_file.setObjectName("menu_file")
        self.menu_edit = QtWidgets.QMenu(self.menubar)
        self.menu_edit.setObjectName("menu_edit")
        self.menu_view = QtWidgets.QMenu(self.menubar)
        self.menu_view.setObjectName("menu_view")
        self.menu_help = QtWidgets.QMenu(self.menubar)
        self.menu_help.setObjectName("menu_help")
        PackingSoftware.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(PackingSoftware)
        self.statusbar.setObjectName("statusbar")
        PackingSoftware.setStatusBar(self.statusbar)
        self.action_new = QtWidgets.QAction(PackingSoftware)
        self.action_new.setObjectName("action_new")
        self.action_open = QtWidgets.QAction(PackingSoftware)
        self.action_open.setObjectName("action_open")
        self.action_save = QtWidgets.QAction(PackingSoftware)
        self.action_save.setObjectName("action_save")
        self.action_exit = QtWidgets.QAction(PackingSoftware)
        self.action_exit.setObjectName("action_exit")
        self.action_undo = QtWidgets.QAction(PackingSoftware)
        self.action_undo.setObjectName("action_undo")
        self.action_redo = QtWidgets.QAction(PackingSoftware)
        self.action_redo.setObjectName("action_redo")
        self.action_toggle_left_dock = QtWidgets.QAction(PackingSoftware)
        self.action_toggle_left_dock.setObjectName("action_toggle_left_dock")
        self.action_toggle_right_dock = QtWidgets.QAction(PackingSoftware)
        self.action_toggle_right_dock.setObjectName("action_toggle_right_dock")
        self.action_toggle_bottom_dock = QtWidgets.QAction(PackingSoftware)
        self.action_toggle_bottom_dock.setObjectName("action_toggle_bottom_dock")
        self.action_about = QtWidgets.QAction(PackingSoftware)
        self.action_about.setObjectName("action_about")
        self.menu_file.addAction(self.action_new)
        self.menu_file.addAction(self.action_open)
        self.menu_file.addAction(self.action_save)
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.action_exit)
        self.menu_edit.addAction(self.action_undo)
        self.menu_edit.addAction(self.action_redo)
        self.menu_view.addAction(self.action_toggle_left_dock)
        self.menu_view.addAction(self.action_toggle_right_dock)
        self.menu_view.addAction(self.action_toggle_bottom_dock)
        self.menu_help.addAction(self.action_about)
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_edit.menuAction())
        self.menubar.addAction(self.menu_view.menuAction())
        self.menubar.addAction(self.menu_help.menuAction())

        self.retranslateUi(PackingSoftware)
        QtCore.QMetaObject.connectSlotsByName(PackingSoftware)

    def retranslateUi(self, PackingSoftware):
        _translate = QtCore.QCoreApplication.translate
        PackingSoftware.setWindowTitle(_translate("PackingSoftware", "智能装箱软件"))
        self.label_condition.setText(_translate("PackingSoftware", "装箱条件设置界面"))
        self.label_3dview.setText(_translate("PackingSoftware", "3D装箱结果展示界面"))
        self.label_simulation.setText(_translate("PackingSoftware", "装箱过程动态仿真界面"))
        self.label_data.setText(_translate("PackingSoftware", "装箱数据管理界面"))
        self.left_dock.setWindowTitle(_translate("PackingSoftware", "功能导航"))
        __sortingEnabled = self.function_list.isSortingEnabled()
        self.function_list.setSortingEnabled(False)
        item = self.function_list.item(0)
        item.setText(_translate("PackingSoftware", "条件设置"))
        item = self.function_list.item(1)
        item.setText(_translate("PackingSoftware", "3D结果展示"))
        item = self.function_list.item(2)
        item.setText(_translate("PackingSoftware", "动态仿真"))
        item = self.function_list.item(3)
        item.setText(_translate("PackingSoftware", "数据管理"))
        self.function_list.setSortingEnabled(__sortingEnabled)
        self.right_dock.setWindowTitle(_translate("PackingSoftware", "工具栏"))
        self.default_tool_btn.setText(_translate("PackingSoftware", "常用工具"))
        self.import_condition_btn.setText(_translate("PackingSoftware", "导入条件"))
        self.export_condition_btn.setText(_translate("PackingSoftware", "导出条件"))
        self.clear_condition_btn.setText(_translate("PackingSoftware", "清空条件"))
        self.bottom_dock.setWindowTitle(_translate("PackingSoftware", "日志"))
        self.menu_file.setTitle(_translate("PackingSoftware", "文件"))
        self.menu_edit.setTitle(_translate("PackingSoftware", "编辑"))
        self.menu_view.setTitle(_translate("PackingSoftware", "视图"))
        self.menu_help.setTitle(_translate("PackingSoftware", "帮助"))
        self.action_new.setText(_translate("PackingSoftware", "新建"))
        self.action_open.setText(_translate("PackingSoftware", "打开"))
        self.action_save.setText(_translate("PackingSoftware", "保存"))
        self.action_exit.setText(_translate("PackingSoftware", "退出"))
        self.action_undo.setText(_translate("PackingSoftware", "撤销"))
        self.action_redo.setText(_translate("PackingSoftware", "重做"))
        self.action_toggle_left_dock.setText(_translate("PackingSoftware", "显示功能栏"))
        self.action_toggle_right_dock.setText(_translate("PackingSoftware", "显示工具栏"))
        self.action_toggle_bottom_dock.setText(_translate("PackingSoftware", "显示日志窗口"))
        self.action_about.setText(_translate("PackingSoftware", "关于"))
